///
/// Include this file for all non-printing vars involving icons
///

// $icon-font-base-name and $font-icons come from here:
@import 'icon-map-generated';

$icon-font-path: '../font/';
$icon-font-class-prefix: 'icon--';


@mixin font-icon-base() {
  font-family: $icon-font-base-name;
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  font-size: inherit;
  transform: translate(0, 0);
}

@mixin font-icon-replace($pseudo) {
  position: relative;
  right: 9999px;
  &:#{$pseudo} { /* stylelint-disable-line */
    position: absolute;
    height: 100%;
    text-align: center;
    top: 0;
    right: -9999px;
  }
}

/// Main Icon mixin.
/// See the [Icons in Pattern Lab](../../pattern-lab/public/?p=atoms-icons).
/// @param {String} $icon - Machine name of icon (filename).
/// @param {String} $pseudo [before] - `before` | `after` The pseudo element to place the icon in.
/// @todo Allow `$pseudo: false` to be declared so we don't have to use a pseudo element if we don't want to.
/// @param {Bool} $text-replace [false]
/// @param {String} $size [inherit]
/// @param {String} $color [inherit]
/// @param {Bool} $block [false] - If `display: block` should be applied.
/// @example scss
/// .class {
///   @include icon('close');
/// }
@mixin icon(
  $icon: "search", // just a default
  $pseudo: before,
  $text-replace: false,
  $size: inherit,
  $color: inherit,
  $block: false
) {
  &:#{$pseudo} { /* stylelint-disable-line */

    @include font-icon-base();
    content: map-get($font-icons, $icon);
    font-size: $size;
    color: $color;

    @content;
  }
  // Replace text with icon, like classic sprites
  @if $text-replace {
    @include font-icon-replace($pseudo);
  }
  // Get around fighting with line-heights
  @if $block {
    display: block;
  }
}
